{"version":3,"sources":["../../../../src/main/app/notes/notesController.js"],"names":["create","req","res","next","body","title","description","response","message","apiResponse","successResponseWithData","errorResponse","errors","readAll","limit","query","notes","readOne","noteID","params","id","note","notFoundResponse","update","noteData","Joi","attempt","string","min","max","required","updateNoteData","remove","then","result","successResponse","err"],"mappings":";;;;;;;;;;;;;AAKC;;AAQD;;AACA;;AAdA;AACA;AACA;AACA;AAaA;AACA,IAAMA,MAAM;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACeF,GAAG,CAACG,IADnB,EACJC,KADI,aACJA,KADI,EACEC,WADF,aACEA,WADF;AAAA;AAAA;AAAA,mBAGc,+BAAYD,KAAZ,EAAkBC,WAAlB,CAHd;;AAAA;AAGHC,YAAAA,QAHG;AAIHC,YAAAA,OAJG,GAIO,2BAJP;AAAA,6CAKAC,wBAAYC,uBAAZ,CAAoCR,GAApC,EAAwCM,OAAxC,EAAgDD,QAAhD,CALA;;AAAA;AAAA;AAAA;AAAA,6CAOAE,wBAAYE,aAAZ,CAA0BT,GAA1B,EAA8B,YAAMU,MAApC,CAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANZ,MAAM;AAAA;AAAA;AAAA,GAAZ,C,CAYA;;;;;AACA,IAAMa,OAAO;AAAA,4FAAG,kBAAOZ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEFW,YAAAA,KAFE,GAEMb,GAAG,CAACc,KAAJ,CAAUD,KAAV,IAAmB,EAFzB;AAAA;AAAA,mBAGY,gCAAaA,KAAb,CAHZ;;AAAA;AAGFE,YAAAA,KAHE;AAAA,8CAIFP,wBAAYC,uBAAZ,CAAoCR,GAApC,EAAwCc,KAAxC,CAJE;;AAAA;AAAA;AAAA;AAAA,8CAMFP,wBAAYE,aAAZ,CAA0BT,GAA1B,EAA8B,aAAMU,MAApC,CANE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPC,OAAO;AAAA;AAAA;AAAA,GAAb,C,CAUA;;;;;AACA,IAAMI,OAAO;AAAA,4FAAG,kBAAOhB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEFe,YAAAA,MAFE,GAEOjB,GAAG,CAACkB,MAAJ,CAAWC,EAFlB;AAAA;AAAA,mBAGW,4BAASF,MAAT,CAHX;;AAAA;AAGFG,YAAAA,IAHE;;AAAA,gBAIHA,IAJG;AAAA;AAAA;AAAA;;AAKEb,YAAAA,OALF,GAKY,iBALZ;AAAA,8CAMGC,wBAAYa,gBAAZ,CAA6BpB,GAA7B,EAAiCM,OAAjC,CANH;;AAAA;AAAA,8CAQDC,wBAAYC,uBAAZ,CAAoCR,GAApC,EAAwCmB,IAAxC,CARC;;AAAA;AAAA;AAAA;AAAA,8CAUDZ,wBAAYE,aAAZ,CAA0BT,GAA1B,EAA8B,aAAMU,MAApC,CAVC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPK,OAAO;AAAA;AAAA;AAAA,GAAb,C,CAaA;;;;;AACA,IAAMM,MAAM;AAAA,4FAAG,kBAAOtB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDe,YAAAA,MAFC,GAEQjB,GAAG,CAACkB,MAAJ,CAAWC,EAFnB;AAAA;AAAA,mBAGY,4BAASF,MAAT,CAHZ;;AAAA;AAGDG,YAAAA,IAHC;;AAAA,gBAIFA,IAJE;AAAA;AAAA;AAAA;;AAKGb,YAAAA,OALH,GAKa,iBALb;AAAA,8CAMIC,wBAAYa,gBAAZ,CAA6BpB,GAA7B,EAAiCM,OAAjC,CANJ;;AAAA;AAQDgB,YAAAA,QARC,GAQU;AACbnB,cAAAA,KAAK,EAAEoB,gBAAIC,OAAJ,CAAYzB,GAAG,CAACG,IAAJ,CAASC,KAArB,EAA2BoB,gBAAIE,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BC,QAA5B,EAA3B,EAAkE,cAAlE,CADM;AAEbxB,cAAAA,WAAW,EAAEmB,gBAAIC,OAAJ,CAAYzB,GAAG,CAACG,IAAJ,CAASE,WAArB,EAAiCmB,gBAAIE,MAAJ,EAAjC,EAA8C,oBAA9C;AAFA,aARV;AAAA;AAAA,mBAaqB,8BAAWT,MAAX,EAAkBM,QAAlB,CAbrB;;AAAA;AAaDO,YAAAA,cAbC;AAAA,8CAeAtB,wBAAYC,uBAAZ,CAAoCR,GAApC,EAAwC6B,cAAxC,CAfA;;AAAA;AAAA;AAAA;AAAA,8CAkBAtB,wBAAYE,aAAZ,CAA0BT,GAA1B,EAA8B,aAAMM,OAApC,CAlBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANe,MAAM;AAAA;AAAA;AAAA,GAAZ,C,CAqBA;;;;;AACA,IAAMS,MAAM;AAAA,4FAAG,kBAAM/B,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEY,4BAASF,GAAG,CAACkB,MAAJ,CAAWC,EAApB,CAFZ;;AAAA;AAEDC,YAAAA,IAFC;;AAAA,gBAGHA,IAHG;AAAA;AAAA;AAAA;;AAIGb,YAAAA,OAJH,GAIa,gBAJb;AAAA,8CAKIC,wBAAYa,gBAAZ,CAA6BpB,GAA7B,EAAiCM,OAAjC,CALJ;;AAAA;AAAA;AAAA,mBAOD,+BAAYP,GAAG,CAACkB,MAAJ,CAAWC,EAAvB,EACLa,IADK,CACA,UAACC,MAAD,EAAY;AACd,kBAAM1B,OAAO,GAAG,cAAhB;AACA,qBAAOC,wBAAY0B,eAAZ,CAA4BjC,GAA5B,EAAgCM,OAAhC,CAAP;AACH,aAJK,WAIG,UAAC4B,GAAD,EAAS;AACd,qBAAO3B,wBAAYE,aAAZ,CAA0BT,GAA1B,EAA8BkC,GAAG,CAACxB,MAAlC,CAAP;AACH,aANK,CAPC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAgBAH,wBAAYE,aAAZ,CAA0BT,GAA1B,EAA8B,aAAMU,MAApC,CAhBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANoB,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["/**\r\n * Contains app controllers.\r\n * The controller can thus be thought of as a middleman between models & services\r\n */\r\n\r\n import {\r\n    createNotes,\r\n    viewNote,\r\n    viewAllNotes,\r\n    updateNote,\r\n    removeNotes\r\n} from './notesService.js'\r\n\r\nimport apiResponse from '../../utility/apiResponse'\r\nimport Joi from 'joi'\r\n\r\n// Create\r\nconst create = async (req, res, next) => {\r\n    const {title,description}=req.body\r\n    try {\r\n        let response = await createNotes(title,description)\r\n        let message = 'Note created succeddfully'\r\n        return apiResponse.successResponseWithData(res,message,response)\r\n    } catch (error) {\r\n        return apiResponse.errorResponse(res,error.errors)\r\n    }\r\n\r\n}\r\n\r\n// Read\r\nconst readAll = async (req, res, next) => {\r\n    try {\r\n        const limit = req.query.limit || 10\r\n        const notes = await viewAllNotes(limit)\r\n       return apiResponse.successResponseWithData(res,notes)\r\n    } catch (error) {\r\n       return apiResponse.errorResponse(res,error.errors)\r\n    }\r\n}\r\n\r\n// Read By ID\r\nconst readOne = async (req, res, next) => {\r\n    try {\r\n        const noteID = req.params.id\r\n        const note = await viewNote(noteID)\r\n        if (!note){\r\n            const message = 'No record found'\r\n            return apiResponse.notFoundResponse(res,message)\r\n        }\r\n        return apiResponse.successResponseWithData(res,note)\r\n    } catch (error) {\r\n        return apiResponse.errorResponse(res,error.errors)\r\n    }\r\n}\r\n// Update\r\nconst update = async (req, res, next) => {\r\n    try {\r\n        const noteID = req.params.id\r\n        const note = await viewNote(noteID)\r\n        if (!note){\r\n            const message = 'No record found'\r\n            return apiResponse.notFoundResponse(res,message)\r\n        }\r\n        const noteData = {\r\n            title: Joi.attempt(req.body.title,Joi.string().min(3).max(30).required(),\"Title Error:\"),\r\n            description: Joi.attempt(req.body.description,Joi.string(),\"Description Error:\")\r\n        }\r\n\r\n        const updateNoteData= await updateNote(noteID,noteData)\r\n        \r\n        return apiResponse.successResponseWithData(res,updateNoteData)\r\n        \r\n    } catch (error) {\r\n        return apiResponse.errorResponse(res,error.message)\r\n    }\r\n}\r\n// Delete\r\nconst remove = async(req, res, next) => {\r\n    try {\r\n        const note = await viewNote(req.params.id)\r\n        if(!note){\r\n            const message = \"Note not found\"\r\n            return apiResponse.notFoundResponse(res,message)\r\n        }\r\n        await removeNotes(req.params.id)\r\n        .then((result) => {\r\n            const message = \"Note Deleted\"\r\n            return apiResponse.successResponse(res,message)\r\n        }).catch((err) => {\r\n            return apiResponse.errorResponse(res,err.errors)\r\n        });\r\n       \r\n    } catch (error) {\r\n        return apiResponse.errorResponse(res,error.errors)\r\n    }\r\n}\r\n\r\nexport {create, readAll, update, remove,readOne};"],"file":"notesController.js"}