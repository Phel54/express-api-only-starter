{"version":3,"sources":["../../../../src/main/app/notes/notesService.js"],"names":["createNotes","title","description","note","Notes","logger","info","save","viewNote","id","findById","toString","noteData","viewAllNotes","limit","options","page","sort","paginate","err","result","Error","notesData","updateNote","console","log","findByIdAndUpdate","$set","removeNotes","findByIdAndRemove","module","exports"],"mappings":";;;;;;;;AAKC;;AALD;AACA;AACA;AACA;AACA;AAGC;AACA,IAAMA,WAAW;AAAA,2FAAG,iBAAOC,KAAP,EAAaC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACIC,YAAAA,IAFY,GAEL,IAAIC,sBAAJ,CAAU;AACjBH,cAAAA,KAAK,EAAEA,KADU;AAEjBC,cAAAA,WAAW,EAAEA;AAFI,aAAV,CAFK;AAMhBG,YAAAA,MAAM,CAACC,IAAP;AANgB;AAAA,mBAOJH,IAAI,CAACI,IAAL,EAPI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXP,WAAW;AAAA;AAAA;AAAA,GAAjB,C,CAYA;;;AACA,IAAMQ,QAAQ;AAAA,4FAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACUL,uBAAMM,QAAN,CAAeD,EAAE,CAACE,QAAH,EAAf,CADV;;AAAA;AACPC,YAAAA,QADO;AAAA,8CAENA,QAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARJ,QAAQ;AAAA;AAAA;AAAA,GAAd,C,CAKA;;;AACA,IAAMK,YAAY;AAAA,4FAAG,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,OADW,GACD;AACZC,cAAAA,IAAI,EAAE,CADM;AAEZF,cAAAA,KAAK,EAAEA,KAFK;AAGZG,cAAAA,IAAI,EAAC;AAHO,aADC;AAAA;AAAA,mBAMOb,uBAAMc,QAAN,CAAe,EAAf,EAAkBH,OAAlB,EAA0B,UAACI,GAAD,EAAKC,MAAL,EAAc;AAC5D,kBAAID,GAAJ,EAAQ;AACJ,sBAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH;;AACD,qBAAOC,MAAP;AACH,aALuB,CANP;;AAAA;AAMXE,YAAAA,SANW;AAAA,8CAYVA,SAZU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZT,YAAY;AAAA;AAAA;AAAA,GAAlB,C,CAeA;;;AACA,IAAMU,UAAU;AAAA,4FAAI,kBAAMd,EAAN,EAASa,SAAT;AAAA;AAAA;AAAA;AAAA;AAChBE,YAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AADgB;AAAA,mBAEHlB,uBAAMsB,iBAAN,CAAwBjB,EAAxB,EAA2B;AAACkB,cAAAA,IAAI,EAACL;AAAN,aAA3B,CAFG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAAA,kBAAVC,UAAU;AAAA;AAAA;AAAA,GAAhB,C,CAMA;;;AACA,IAAMK,WAAW;AAAA,4FAAG,kBAAOnB,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHL,uBAAMyB,iBAAN,CAAwBpB,EAAxB,CADG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXmB,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAGAE,MAAM,CAACC,OAAP,GAAkB;AACd/B,EAAAA,WAAW,EAAXA,WADc;AAEdQ,EAAAA,QAAQ,EAARA,QAFc;AAGdK,EAAAA,YAAY,EAAZA,YAHc;AAIdU,EAAAA,UAAU,EAAVA,UAJc;AAKdK,EAAAA,WAAW,EAAXA;AALc,CAAlB","sourcesContent":["/**\r\n * Contains module(notes) services. \r\n * A service object implements the userâ€™s interactions with the application. \r\n * It contains business logic that describe the connections with your domain objects.\r\n */\r\n import Notes from './notesModel.js'\r\n\r\n // Create\r\n const createNotes = async (title,description) => {\r\n     // Create an user object\r\n     let note = new Notes({\r\n         title: title,\r\n         description: description\r\n     })\r\n     logger.info()\r\n    return await note.save()\r\n    \r\n    \r\n }\r\n \r\n // Read\r\n const viewNote = async (id)=> {\r\n     const noteData = await Notes.findById(id.toString())\r\n     return noteData\r\n }\r\n \r\n // Read\r\n const viewAllNotes = async (limit)=> {\r\n     const options = {\r\n         page: 1,\r\n         limit: limit,\r\n         sort:'-createdAt'\r\n       };\r\n     const notesData = await Notes.paginate({},options,(err,result)=>{\r\n         if (err){\r\n             throw new Error(err)\r\n         }\r\n         return result\r\n     })\r\n     return notesData\r\n }\r\n \r\n // Update\r\n const updateNote =  async(id,notesData)=>{\r\n     console.log(notesData);\r\n     return await Notes.findByIdAndUpdate(id,{$set:notesData})\r\n }\r\n \r\n \r\n // Delete\r\n const removeNotes = async (id)=> {\r\n     return await Notes.findByIdAndRemove(id)\r\n }\r\n module.exports =  {\r\n     createNotes, \r\n     viewNote, \r\n     viewAllNotes, \r\n     updateNote, \r\n     removeNotes\r\n};"],"file":"notesService.js"}